package com.getkeepsafe.dexcount

import spock.lang.Specification

class PackageTreeTest extends Specification {
    def "adding duplicates increments count"() {
        setup:
        def tree = new PackageTree()
        tree.addMethodRef("com.foo.Bar")

        when:
        tree.addMethodRef("com.foo.Bar")

        then:
        tree.getMethodCount() == 2
    }

    def "can print a package list with classes included"() {
        setup:
        def writer = new StringBuilder()
        def tree = new PackageTree()

        when:
        tree.addMethodRef("com.foo.Bar")
        tree.addMethodRef("com.foo.Bar")
        tree.addMethodRef("com.foo.Qux")
        tree.addMethodRef("com.alpha.Beta")

        tree.printPackageList(writer, new PrintOptions(includeClasses: true))

        then:
        writer.toString() == """4        com
1        com.alpha
1        com.alpha.Beta
3        com.foo
2        com.foo.Bar
1        com.foo.Qux
"""
    }

    def "can print a package list without classes"() {
        setup:
        def writer = new StringBuilder()
        def tree = new PackageTree()

        when:
        tree.addMethodRef("com.foo.Bar")
        tree.addMethodRef("com.foo.Bar")
        tree.addMethodRef("com.foo.Qux")
        tree.addMethodRef("com.alpha.Beta")

        tree.printPackageList(writer, new PrintOptions(includeClasses: false))

        then:
        writer.toString() == """4        com
1        com.alpha
3        com.foo
"""
    }

    def "can print a tree"() {
        setup:
        def sb = new StringBuilder()
        def tree = new PackageTree()

        when:
        tree.addMethodRef("com.foo.Bar")
        tree.addMethodRef("com.foo.Bar")
        tree.addMethodRef("com.foo.Qux")
        tree.addMethodRef("com.alpha.Beta")

        tree.printTree(sb, new PrintOptions(includeClasses: true))

        then:
        sb.toString() == """com (4)
  alpha (1)
    Beta (1)
  foo (3)
    Bar (2)
    Qux (1)
"""
    }

    def "accepts autogenerated class names"() {
        setup:
        def sb = new StringBuilder()
        def tree = new PackageTree()

        when:
        tree.addMethodRef('com.foo.bar.$$Generated$Class$$')

        tree.printPackageList(sb, new PrintOptions(includeClasses: true))

        then:
        def trimmed = sb.toString().trim()
        def ix = trimmed.lastIndexOf(' ')
        trimmed.substring(ix + 1) == 'com.foo.bar.$$Generated$Class$$'
    }

    def "prints a header when options say to"() {
        setup:
        def tree = new PackageTree()
        def sb = new StringBuilder()
        def opts = new PrintOptions()
        opts.printHeader = true

        when:
        tree.printPackageList(sb, opts)

        then:
        def trimmed = sb.toString().trim()
        trimmed == "methods  package/class name"
    }

    def "header includes column for fields when field count is specified"() {
        setup:
        def tree = new PackageTree()
        def sb = new StringBuilder()
        def opts = new PrintOptions()
        opts.printHeader = true
        opts.includeFieldCount = true

        when:
        tree.printPackageList(sb, opts)

        then:
        def trimmed = sb.toString().trim()
        trimmed == "methods  fields   package/class name"
    }

    def "package list can include field counts"() {
        setup:
        def tree = new PackageTree()
        def sb = new StringBuilder()
        def opts = new PrintOptions()
        opts.printHeader = true
        opts.includeFieldCount = true
        opts.includeClasses = true

        when:
        tree.addMethodRef("x.y.Z")
        tree.addMethodRef("x.y.Z")
        tree.addMethodRef("x.y.Z")
        tree.addFieldRef("x.y.Z")
        tree.addFieldRef("x.y.Z")
        tree.addFieldRef("x.y.W")
        tree.printPackageList(sb, opts)

        then:
        def trimmed = sb.toString().trim()
        def expected = """
methods  fields   package/class name
3        3        x
3        3        x.y
0        1        x.y.W
3        2        x.y.Z""".trim()

        trimmed == expected
    }

    def "package list can be sorted by method count"() {
        setup:
        def tree = new PackageTree()
        def sb = new StringBuilder()
        def opts = new PrintOptions()
        opts.printHeader = true
        opts.includeFieldCount = true
        opts.includeClasses = true
        opts.orderByMethodCount = true

        when:
        tree.addMethodRef("x.y.Z")
        tree.addMethodRef("x.y.Z")
        tree.addMethodRef("x.y.Z")
        tree.addFieldRef("x.y.Z")
        tree.addFieldRef("x.y.Z")
        tree.addFieldRef("x.y.W")
        tree.printPackageList(sb, opts)

        then:
        def trimmed = sb.toString().trim()
        def expected = """
methods  fields   package/class name
3        3        x
3        3        x.y
3        2        x.y.Z
0        1        x.y.W
""".trim()

        trimmed == expected
    }
}
